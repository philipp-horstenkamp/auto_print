name: CI

on:
  push:
    branches:
    - main
    tags:
    - v*                 # run CI when a version tag is pushed
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
  release:
    types: [published]   # optional: run when a draft is published

jobs:

  test:
    name: Test
    runs-on: windows-latest
    permissions:
      contents: read
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
      fail-fast: false
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx
        pipx install poetry
        poetry install --only main,test
    - name: Run tests with coverage
      run: |
        poetry run pytest -v --cov=auto_print --cov-report=xml --cov-report=term
    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v5
      with:
        lfs: true
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx
        pipx install poetry
        poetry install --only main,docs
    - name: Build English documentation
      run: |
        cd docs
        poetry run make html
#    - name: Build German documentation
#      run: |
#        cd docs
#        poetry run make gettext
#        # Remove locale directory if it exists to prevent FileExistsError
#        rm -rf locale
#        poetry run sphinx-intl update -p _build/gettext -l de
#        poetry run make -e SPHINXOPTS="-D language='de'" html
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          docs/_build/html

  wheel-build:
    name: Wheel Build
    needs: [test, docs]
    runs-on: windows-latest
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx
        pipx install poetry
    - name: wheel-build
      run: |
        poetry build
    - name: Generate provenance for wheel
      uses: actions/attest-build-provenance@v3
      with:
        subject-path: dist/*.whl
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: |
          dist/*.whl

  msi-build:
    name: MSI-Build
    needs: [test, docs]
    runs-on: windows-latest
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx
        pipx install poetry
        poetry install --only main,build
    - name: MSI-build
      run: |
        poetry run python msi_setup.py bdist_msi
    - name: Generate provenance for MSI
      uses: actions/attest-build-provenance@v3
      with:
        subject-path: dist/*.msi
    - name: Upload MSI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSI
        path: |
          dist/*.msi

  deploy-docs:
    name: Deploy Documentation
    needs: [docs]
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write
      pages: write
    steps:
    - name: Download documentation artifact
      uses: actions/download-artifact@v6
      with:
        name: documentation
        path: docs_html

    - name: Move HTML to root (optional, but recommended if nested)
      run: |
        ls -lah
        ls -lah docs_html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs_html
        publish_branch: gh-pages
        enable_jekyll: false
