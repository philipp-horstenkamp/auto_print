name: Release Drafter

on:
  push:
    branches:
    - main
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Draft Release
      id: draft_release
      uses: release-drafter/release-drafter@v6
      with:
        config-name: release-drafter.yml
        disable-autolabeler: false
        commitish: main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx
        pipx install poetry
        python -m pipx ensurepath
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"

    - name: Set poetry version
      if: steps.draft_release.conclusion == 'success' && steps.draft_release.outputs.resolved_version != ''
      run: |
        VERSION="${{ steps.draft_release.outputs.resolved_version }}"
        echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$' || { echo "no stable SemVer"; exit 1; }
        poetry version "$VERSION"

    - name: Check for changes to pyproject.toml
      id: check_diff
      if: steps.draft_release.conclusion == 'success' && steps.draft_release.outputs.resolved_version != ''
      run: |
        if git diff --quiet pyproject.toml; then
        echo "changed=false" >> "$GITHUB_OUTPUT"
        else
        echo "changed=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Download wheel artifacts from CI workflow
      if: steps.draft_release.conclusion == 'success' && steps.draft_release.outputs.resolved_version != ''
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: ci.yml
        name: distribution-packages
        path: ./dist/wheel
        workflow_conclusion: success

    - name: Download MSI artifacts from CI workflow
      if: steps.draft_release.conclusion == 'success' && steps.draft_release.outputs.resolved_version != ''
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: ci.yml
        name: MSI
        path: ./dist/msi
        workflow_conclusion: success

    - name: List downloaded artifacts
      if: steps.draft_release.conclusion == 'success' && steps.draft_release.outputs.resolved_version != ''
      run: |
        ls -al ./dist
        ls -al ./dist/wheel
        ls -al ./dist/msi

    - name: Upload artifacts to release
      if: steps.draft_release.conclusion == 'success' && steps.draft_release.outputs.resolved_version != ''
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./dist/wheel/*.whl
          ./dist/msi/*.msi
        fail_on_unmatched_files: true
        tag_name: v${{ steps.draft_release.outputs.resolved_version }}
        draft: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      if: steps.check_diff.outputs.changed == 'true' && steps.draft_release.conclusion == 'success' && steps.draft_release.outputs.resolved_version != ''
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Commit and push version bump to a fixed branch
      if: steps.check_diff.outputs.changed == 'true' && github.event_name != 'pull_request' && steps.draft_release.conclusion == 'success' && steps.draft_release.outputs.resolved_version != ''
      run: |
        VERSION="${{ steps.draft_release.outputs.resolved_version }}"
        BRANCH_NAME="version-bump"

        # Switch to a new branch with working tree changes
        git switch -C $BRANCH_NAME

        # Add and commit changes
        git add pyproject.toml
        git commit -m "chore: bump version to $VERSION" || echo "nothing to commit"

        # Push to remote
        git push --force-with-lease origin $BRANCH_NAME

        echo "Version bump to $VERSION has been pushed to the '$BRANCH_NAME' branch."
        echo "You can create a PR from this branch when you're ready to merge the version bump."
