[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.black]
target-version = ["py310"]

[tool.isort]
profile = "black"

[tool.mypy]
follow_imports = "silent"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "cx_Freeze"

[tool.poetry]
authors = ["Philipp Horstenkamp <philipp@horstenkamp.de>"]
description = "A Short programm that checks a file for its filename and routs the file to a printer or the default software to print defined in the OS or any other software."
license = "MIT"
name = "auto-print"
version = "2.0.0rc2"

[tool.poetry.dependencies]
case-insensitive-dictionary = "0.2.1"  # Dictionary implementation with case-insensitive keys
ghostscript = "^0.7"  # Python interface for Ghostscript (PDF processing)
python = ">=3.11,<3.14"  # Python version requirement
pywin32 = {version = ">=306,<311", markers = "sys_platform == 'win32'"}  # Windows API access for printing functionality

[tool.poetry.group.build.dependencies]
cx-freeze = "^8.0.0"  # For creating standalone executables from Python scripts

[tool.poetry.group.dev.dependencies]
jupyter = "^1.0.0"  # Interactive computing environment for development and testing
pre-commit = "^2.16.0"  # Framework for managing and maintaining pre-commit hooks

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"  # Documentation generator for Python projects
sphinx-argparse = "^0.4.0"  # Extension for documenting command-line arguments
sphinx-autodoc-typehints = "^1.25.2"  # Better type hint documentation
sphinx-copybutton = "^0.5.2"  # Adds copy buttons to code blocks in documentation
sphinx-intl = "^2.1.0"  # Internationalization support for Sphinx documentation
sphinx-markdown-tables = "^0.0.17"  # Better rendering of markdown tables
sphinx-notfound-page = "^1.0.0"  # Custom 404 page for documentation
sphinx-prompt = "^1.5.0"  # Better command prompt examples
sphinx-rtd-dark-mode = "^1.2.4"  # Dark mode toggle for Read the Docs theme
sphinx-rtd-theme = "^1.3.0"  # Read the Docs theme for Sphinx documentation
sphinx-tabs = "^3.4.1"  # Tabbed content for code examples
sphinxcontrib-mermaid = "^1.0.0"  # Mermaid diagrams support in documentation

[tool.poetry.group.lint.dependencies]
mypy = "^1.0.0"  # Static type checker for Python
pip-audit = "*"  # Tool for scanning Python dependencies for known vulnerabilities
rstcheck = {extras = ["toml", "sphinx"], version = "^6.2.0"}  # RST syntax checker for documentation with TOML config support
ruff = "*"  # Fast Python linter, written in Rust

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"  # Testing framework for Python
pytest-cov = "^4.1.0"  # Coverage reporting plugin for pytest
pytest-github-actions-annotate-failures = "^0.2.0"  # Annotates test failures in GitHub Actions
pytest-mock = "^3.14.0"  # Thin-wrapper around the mock package for pytest
pytest-randomly = "^3.16.0"  # Pytest plugin to randomly order tests
pytest-verbose-parametrize = "^1.8.1"  # Makes parametrized tests more verbose

[tool.poetry.scripts]
auto-print = "auto_print.execute:main"
auto-print-config = "auto_print.config_generator:main"

[tool.pytest.ini_options]
addopts = "--cov=auto_print --cov-report=xml --cov-report=term"
testpaths = ["tests"]

[tool.rstcheck]
ignore_directives = ["argparse", "prompt", "tabs"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv"
]
fix = true
# Same as Black.
line-length = 88
# Target Python 3.10.
target-version = "py311"

[tool.ruff.lint]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
ignore = [
  "E501"  # line too long
]
select = [
  "A",  # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",  # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",  # pydocstyle
  "E",  # pycodestyle errors
  "ERA",  # eradicate (commented-out code)
  "EXE",  # flake8-executable
  "F",  # pyflakes
  "FBT",  # flake8-boolean-trap
  "FURB",  # Ruff-native idioms
  "I",  # isort
  "N",  # pep8-naming
  "NPY",  # numpy-specific rules
  "PD",  # pandas-vet
  "PERF",  # perflint
  "PIE",  # flake8-pie
  "PL",  # pylint rules
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific rules
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP"  # pyupgrade
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"auto_print_execute.py" = ["PLC0415"]
"docs/*" = ["D"]
"tests/*" = ["PLR2004", "ARG", "PLR0913", "TRY003", "PLC0415"]

[tool.ruff.lint.pydocstyle]
convention = "google"
